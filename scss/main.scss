@import "partials/functions"; // because we're using one of the functions in the variables partial, we need to import the functions partial first
@import "partials/variables";
@import "partials/mixins";

// @for Loop:
// @for $i from 1 to 6 DOESN'T include the upper bound of 6
@for $i from 1 through 6 {
	// Use interpolation to incorporate our variable:
	.col-#{$i} {
		width: $i * 2em;
	}
}

// @each Loop:
$speakers: bob-banker, patty-plume, sandra-smith;
@each $speaker in $speakers {
	.#{$speaker}-profile {
		background-image: url('/img/#{$speaker}.png');
	}
}

// A map is a data structure with key-value pairs:
$font-sizes: (tiny: 8px, small: 11px, medium: 13px, large: 18px);
// Now we can iterate over the map with an @each loop:
@each $name, $size in $font-sizes {
	.#{$name} {
		font-size: $size;
	}
}

// @while loops:
$j: 2;
@while $j <= 8 {
	.picture-#{$j} {
		width: $j * 10%;
	}
	// DON'T forget the increment statement or you'll have an infinite loop:
	$j: $j + 2;
}

@include google-font("Alegreya+Sans");
@include google-font("Titillium+Web");

@include fancy-links; // applies to root/body

@include apply-to-ie-6 {
	body {
		font-size: 125%;
	}
}

.error {
	color: red;
}

.critical-error {
	@extend .error;
	bottom: 1px solid red;
	font-weight: bold;
}

body {
	background-color: $body-background-color;
	font-family: $text-font;
	font-size: em(18px);
	color: $text-color;

	@include large-screens {
		font-size: 125%;
	}
}

// $contrast: high;

// body {
// 	font-family: $text-font;
// 	font-size: em(18px);
// 	@if $contrast == high {
// 		color: #000;
// 	} @else if $contrast == low {
// 		color: #999;
// 	} @else {
// 		color: $text-color;
// 	}
// 	color: $text-color;

// 	@include large-screens {
// 		font-size: 125%;
// 	}
// }

h1, h2, h3, h4 {
	font-family: $headline-font;
}

h2 {
	@include large-text;
}

p {
	font-family: $text-font;
}

a {
	color: $link-color;

	@include blue-beans {
		color: #8779ff;
	}
	// to use pseudoselectors, use the ampersand like so to refer to the parent element:
	&:hover {
		// To use the darken() function, the first argument is the color we want to modify, and the second is a percent:
		color: darken($link-color, 15%);
	}
}

%highlight {
	font-style: italic;
}

.sub-title {
	@extend %highlight;
	@extend .foo !optional;
	font-size: em(20px);
}

.warning-button {
	@include warning;
	padding: 8px 12px;
}

.cta-button {
	@extend .warning-button;
	@extend .error;
	@include rounded;
	font-weight: bold;
}

.super-cta-button {
	@extend .cta-button;
	font-size: em(20px);
}

#header {
	@include box();
	@include box-shadow(2px 0px 4px #999, 1px 1px 6px $secondary-color); 
	height: $header-height;
	background-color: $theme-color;

	#main-menu {

		li {
			display: inline;
		}
		a {
			color: $menu-item-color;
			padding: 6px 8px;
			border-bottom: 1px solid transparentize(#fefefe, 1);
			transition: border-bottom .4s;
			transition-timing-function: ease-in-out;

			&:hover {
				border-bottom: 1px solid opacify(#fefefe, .5);
			}
		}
	}

	#logo {

	}
}

#main {
	width: $content-width;
	@include large-screens {
		width: auto;
		max-width: $content-width;
	}
	margin-left: auto;
	margin-right: auto;
	
	#content {
		float: left;
		width: 6*$col;
	}

	#sidebar {
		float: right;
		width: 2*$col;

		li {
			list-style-type: none;
			padding: em(16px) em(20px);
			border-bottom: 1px dashed #999;

			&:hover {
				background-color: $hover-btn-color;
			}
		}
	}
}

#footer {
	clear: both;
	height: $footer-height;
	background-color: $tertiary-color;

	@include rogers-rovers {
		border-top: 5px solid darken($tertiary-color, 15%);
	}
}

