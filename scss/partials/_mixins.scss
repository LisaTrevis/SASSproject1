@mixin blue-beans {
	@if $brand == blue-beans {
		@content;
	}	
}

@mixin rogers-rovers {
	@if $brand == rogers-rovers {
		@content;
	}	
}

@mixin pastry-pizza {
	@if $brand == pastry-pizza {
		@content;
	}	
}

@mixin tiny-screens () {
	@media only screen and (max-width: 320px) {
		@content;
	}
}

@mixin small-screens () {
	@media only screen and (max-width: 480px) {
		@content;
	}
}

@mixin medium-screens () {
	@media only screen and (max-width: 680px) {
		@content;
	}
}

@mixin large-screens () {
	@media only screen and (max-width: 960px) {
		@content;
	}
}

@mixin google-font($font) {
	$font: unquote($font);
	// We use interpolation to make sure the preprocessor knows that $font is a variable and not just part of the string url using the "#" and {}. This is only useable with import statements of css, not scss.
	@import url(https://fonts.googleapis.com/css?family=#{$font});
}

@mixin warning {
	background-color: $button-color;
	color: #fff;

	&:hover {
		background-color: lighten($hover-btn-color, 10%);
	}
}

// var args:
@mixin box-shadow($shadows...) {
	box-shadow: $shadows;
	-moz-box-shadow: $shadows;
	-webkit-box-shadow: $shadows;
}

@mixin apply-to-ie-6 {
	* html { // styles will only applies to IE6
		@content;
	}
}

@mixin large-text {
	font: {
		size: 22px;
		weight: bold;
	}
}

// Using arguments in a mixin, with a default value included:
@mixin rounded($radius: 6px) {
	border-radius: $radius;
}

@mixin box($radius: 6px, $border: 1px solid black) {
	@include rounded($radius);
	border: $border;
}

@mixin fancy-links {
	a {
		font-style: italic;
		text-decoration: none;
	}
}